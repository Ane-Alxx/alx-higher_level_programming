# Module: 2-matrix_divided.txt

==============================
How to Use 2-matrix_divided.py
==============================

this module will deal with the matrix division function 

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Enter the values for the matrices
    >>> mat1 = [[1, 2, 3], [3, 4, 5], [5, 6, 7]]
    >>> mat2 = [[1, 2, 3], [4, 5, 6]]

Divide the matrices by a whole number
    >>> print(matrix_divided(mat1, 4))
    [[0.25, 0.5, 0.75], [0.75, 1.0, 1.25], [1.25, 1.5, 1.75]]
    >>> print(matrix_divided(mat2, 3))
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Test case inputs that produce errors
    >>> non = None
    >>> empty_m = []
    >>> MT_mat = [[], [], []]
    >>> not_mat = [42, [2, 5], [1, 2, 3]]
    >>> mixed_mat = [["green", 1, 2], [3, 4, "p"], ["2li", 5, 6]]
    >>> diff_len = [[1,3,3,3], [3,5,1,2,5], [2,5,8]]

Test case with none
    >>> matrix_divided(non, 3)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test case with an empty matrix 
    >>> matrix_divided(empty_m, 2)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided(MT_mat, 3)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

test case with a none matrix
    >>> matrix_divided(not_mat, 2)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

test case with a mixed matrix
    >>> matrix_divided(mixed_mat, 2)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Tests case zero divisiom
    >>> print(matrix_divided(mat1, 0))
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

Test case different row length
    >>> matrix_divided(diff_len, 3)
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size
