============================================
How to use 7-base_geometry.py
============================================

This is a module for the integer validator.

Test cases with numbers:


	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
	>>> bg = BaseGeometry()

	>>> bg.integer_validator("num", 15)

	>>> bg.integer_validator("num", -1)
	Traceback (most recent call last):
	ValueError: number must be greater than 0

Test with weird values:
	>>> bg.integer_validator("num", 22, 19)
	Traceback (most recent call last):
 	TypeError: integer_validator() takes 3 positional arguments but 4 were given


	>>> bg.integer_validator("inum", int('inp'))
	Traceback (most recent call last):
	ValueError: invalid literal for int() with base 10: 'inp'

    >>> bg = BaseGeometry(5)
    Traceback (most recent call last):
    ...
    TypeError: object() takes no parameters


    >>> bg = BaseGeometry()


    >>> type(bg) == BaseGeometry
    True


    >>> isinstance(bg, BaseGeometry)
    True


    >>> issubclass(type(bg), BaseGeometry)
    True


   >>> type(bg.area)
   <class 'method'>


   >>> type(bg.integer_validator)
   <class 'method'>


    >>> bg.area()
    Traceback (most recent call last):
    ...
    Exception: area() is not implemented


    >>> bg.area(5)
    Traceback (most recent call last):
    ...
    TypeError: area() takes 1 positional argument but 2 were given


    >>> bg.integer_validator()
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'


    >>> bg.integer_validator("Hello")
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'


    >>> bg.integer_validator("Hello", 2, 2)
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() takes 3 positional arguments but 4 were given


    >>> bg.integer_validator("Test", 2)


    >>> bg.integer_validator("Test", -2)
    Traceback (most recent call last):
    ...
    ValueError: Test must be greater than 0


    >>> bg.integer_validator("Test", 0)
    Traceback (most recent call last):
    ...
    ValueError: Test must be greater than 0


    >>> bg.integer_validator("Test", 1.0)
    Traceback (most recent call last):
    ...
    TypeError: Test must be an integer


    >>> bg.integer_validator("Test", -1.0)
    Traceback (most recent call last):
    ...
    TypeError: Test must be an integer


    >>> bg.integer_validator("Test", True)
    Traceback (most recent call last):
    ...
    TypeError: Test must be an integer


    >>> bg.integer_validator("Test", [1])
    Traceback (most recent call last):
    ...
    TypeError: Test must be an integer


    >>> bg.integer_validator("Test", (1, ))
    Traceback (most recent call last):
    ...
    TypeError: Test must be an integer


    >>> bg.integer_validator("Test", {1})
    Traceback (most recent call last):
    ...
    TypeError: Test must be an integer


    >>> bg.integer_validator("Test", {1: 1})
    Traceback (most recent call last):
    ...
    TypeError: Test must be an integer


    >>> bg.integer_validator("Test", None)
    Traceback (most recent call last):
    ...
    TypeError: Test must be an integer


    >>> bg.integer_validator("Test", "1")
    Traceback (most recent call last):
    ...
    TypeError: Test must be an integer
